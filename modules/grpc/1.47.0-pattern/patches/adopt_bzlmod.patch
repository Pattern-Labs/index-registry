diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100644
index 0000000000..125e66a59b
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,31 @@
+module(
+    name = "grpc",
+    compatibility_level = 1,
+    version = "1.47.0-pattern",
+)
+
+bazel_dep(name = "bazel_skylib", version = "1.2.0")
+bazel_dep(name = "boringssl", version = "0.0.0-20211025-d4f1ab9")
+bazel_dep(name = "c-ares", repo_name = "com_github_cares_cares", version = "1.15.0")
+bazel_dep(name = "abseil-cpp", repo_name = "com_google_absl", version = "20211102.0")
+bazel_dep(name = "protobuf", repo_name = "com_google_protobuf", version = "3.19.2")
+bazel_dep(name = "re2", repo_name = "com_googlesource_code_re2", version = "2021-09-01")
+bazel_dep(name = "rules_proto", version = "4.0.0")
+bazel_dep(name = "upb", version = "0.0.0-20220602-e5f2601")
+bazel_dep(name = "zlib", version = "1.2.12")
+bazel_dep(name = "rules_java", version = "5.1.0")
+bazel_dep(name = "rules_go", repo_name = "io_bazel_rules_go", version = "0.33.0")
+
+grpc_repo_deps_ext = use_extension("//bazel:grpc_deps.bzl", "grpc_repo_deps_ext")
+
+use_repo(
+    grpc_repo_deps_ext,
+    "com_envoyproxy_protoc_gen_validate",
+    "com_google_googleapis",
+    "com_github_cncf_udpa",
+    "envoy_api",
+)
+
+grpc_extra_deps_ext = use_extension("//bazel:grpc_extra_deps.bzl", "grpc_extra_deps_ext")
+
+use_repo(grpc_extra_deps_ext, "com_google_googleapis_imports")
diff --git a/WORKSPACE b/WORKSPACE
index 782abc63b4..14f997d4b1 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -86,5 +86,5 @@ load("@io_bazel_rules_python//python:pip.bzl", "pip_install")
 
 pip_install(
     name = "grpc_python_dependencies",
-    requirements = "@com_github_grpc_grpc//:requirements.bazel.txt",
+    requirements = "//:requirements.bazel.txt",
 )
diff --git a/bazel/cc_grpc_library.bzl b/bazel/cc_grpc_library.bzl
index 9c31f0c1e2..dc456ad2d8 100644
--- a/bazel/cc_grpc_library.bzl
+++ b/bazel/cc_grpc_library.bzl
@@ -101,7 +101,7 @@ def cc_grpc_library(
         generate_cc(
             name = codegen_grpc_target,
             srcs = proto_targets,
-            plugin = "@com_github_grpc_grpc//src/compiler:grpc_cpp_plugin",
+            plugin = "//src/compiler:grpc_cpp_plugin",
             well_known_protos = well_known_protos,
             generate_mocks = generate_mocks,
             **kwargs
@@ -113,6 +113,6 @@ def cc_grpc_library(
             hdrs = [":" + codegen_grpc_target],
             deps = deps +
                    extra_deps +
-                   ["@com_github_grpc_grpc//:grpc++_codegen_proto"],
+                   ["//:grpc++_codegen_proto"],
             **kwargs
         )
diff --git a/bazel/generate_cc.bzl b/bazel/generate_cc.bzl
index bd1d545799..e554539db2 100644
--- a/bazel/generate_cc.bzl
+++ b/bazel/generate_cc.bzl
@@ -187,7 +187,7 @@ _generate_cc = rule(
             mandatory = False,
         ),
         "_protoc": attr.label(
-            default = Label("//external:protocol_compiler"),
+            default = "@com_google_protobuf//:protoc",
             executable = True,
             cfg = "host",
         ),
diff --git a/bazel/generate_objc.bzl b/bazel/generate_objc.bzl
index b0e9211480..ceefd6d5a0 100644
--- a/bazel/generate_objc.bzl
+++ b/bazel/generate_objc.bzl
@@ -163,7 +163,7 @@ generate_objc = rule(
             providers = [ProtoInfo],
         ),
         "plugin": attr.label(
-            default = "@com_github_grpc_grpc//src/compiler:grpc_objective_c_plugin",
+            default = "//src/compiler:grpc_objective_c_plugin",
             executable = True,
             providers = ["files_to_run"],
             cfg = "host",
@@ -180,7 +180,7 @@ generate_objc = rule(
             default = "@com_google_protobuf//:well_known_protos",
         ),
         "_protoc": attr.label(
-            default = Label("//external:protocol_compiler"),
+            default = "@com_google_protobuf//:protoc",
             executable = True,
             cfg = "host",
         ),
diff --git a/bazel/grpc_build_system.bzl b/bazel/grpc_build_system.bzl
index b7c51bb73b..d5fab4cced 100644
--- a/bazel/grpc_build_system.bzl
+++ b/bazel/grpc_build_system.bzl
@@ -30,8 +30,6 @@ Contains macros used throughout the repo.
 load("//bazel:cc_grpc_library.bzl", "cc_grpc_library")
 load("//bazel:copts.bzl", "GRPC_DEFAULT_COPTS")
 load("@upb//bazel:upb_proto_library.bzl", "upb_proto_library", "upb_proto_reflection_library")
-load("@build_bazel_rules_apple//apple:ios.bzl", "ios_unit_test")
-load("@build_bazel_rules_apple//apple/testing/default_runner:ios_test_runner.bzl", "ios_test_runner")
 
 # The set of pollers to test against if a test exercises polling
 POLLERS = ["epoll1", "poll"]
@@ -63,14 +61,14 @@ def _get_external_deps(external_deps):
         elif dep == "cares":
             ret += select({
                 "//:grpc_no_ares": [],
-                "//conditions:default": ["//external:cares"],
+                "//conditions:default": ["//third_party:cares"],
             })
         elif dep == "cronet_c_for_grpc":
             ret.append("//third_party/objective_c/Cronet:cronet_c_for_grpc")
         elif dep.startswith("absl/"):
             ret.append("@com_google_absl//" + dep)
         else:
-            ret.append("//external:" + dep)
+            ret.append("//third_party:" + dep)
     return ret
 
 def _update_visibility(visibility):
@@ -237,10 +235,6 @@ def ios_cc_test(
     test_lib_ios = name + "_test_lib_ios"
     ios_tags = tags + ["manual", "ios_cc_test"]
     test_runner = "ios_x86_64_sim_runner_" + name
-    ios_test_runner(
-        name = test_runner,
-        device_type = "iPhone X",
-    )
     if not any([t for t in tags if t.startswith("no_test_ios")]):
         native.objc_library(
             name = test_lib_ios,
@@ -253,15 +247,6 @@ def ios_cc_test(
             testonly = 1,
         )
         ios_test_deps = [":" + test_lib_ios]
-        ios_unit_test(
-            name = name + "_on_ios",
-            size = kwargs.get("size"),
-            data = kwargs.get("data"),
-            tags = ios_tags,
-            minimum_os_version = "9.0",
-            runner = test_runner,
-            deps = ios_test_deps,
-        )
 
 def expand_tests_for_each_poller_and_engine(name, srcs, deps, tags, args, exclude_pollers, uses_event_engine):
     """Common logic used to parameterize tests for every poller and EventEngine.
diff --git a/bazel/grpc_deps.bzl b/bazel/grpc_deps.bzl
index bae066d739..796547996d 100644
--- a/bazel/grpc_deps.bzl
+++ b/bazel/grpc_deps.bzl
@@ -14,10 +14,10 @@
 """Load dependencies needed to compile and test the grpc library as a 3rd-party consumer."""
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
-load("@com_github_grpc_grpc//bazel:grpc_python_deps.bzl", "grpc_python_deps")
+load("//bazel:grpc_python_deps.bzl", "grpc_python_deps")
 
 # buildifier: disable=unnamed-macro
-def grpc_deps():
+def grpc_bind_deps():
     """Loads dependencies need to compile and test the grpc library."""
 
     native.bind(
@@ -127,12 +127,12 @@ def grpc_deps():
 
     native.bind(
         name = "grpc_cpp_plugin",
-        actual = "@com_github_grpc_grpc//src/compiler:grpc_cpp_plugin",
+        actual = "//src/compiler:grpc_cpp_plugin",
     )
 
     native.bind(
         name = "grpc++_codegen_proto",
-        actual = "@com_github_grpc_grpc//:grpc++_codegen_proto",
+        actual = "//:grpc++_codegen_proto",
     )
 
     native.bind(
@@ -195,6 +195,7 @@ def grpc_deps():
         actual = "@com_github_libuv_libuv//:libuv_test",
     )
 
+def grpc_repo_deps():
     if "boringssl" not in native.existing_rules():
         http_archive(
             name = "boringssl",
@@ -211,7 +212,7 @@ def grpc_deps():
     if "zlib" not in native.existing_rules():
         http_archive(
             name = "zlib",
-            build_file = "@com_github_grpc_grpc//third_party:zlib.BUILD",
+            build_file = "//third_party:zlib.BUILD",
             sha256 = "ef47b0fbe646d69a2fc5ba012cb278de8e8946a8e9649f83a807cc05559f0eff",
             strip_prefix = "zlib-21767c654d31d2dccdde4330529775c6c5fd5389",
             urls = [
@@ -220,19 +221,6 @@ def grpc_deps():
             ],
         )
 
-    if "com_google_protobuf" not in native.existing_rules():
-        http_archive(
-            name = "com_google_protobuf",
-            sha256 = "bab1685f92cc4ea5b6420026eef6c7973ae96fc21f4f1a3ee626dc6ca6d77c12",
-            strip_prefix = "protobuf-22d0e265de7d2b3d2e9a00d071313502e7d4cccf",
-            urls = [
-                "https://storage.googleapis.com/grpc-bazel-mirror/github.com/protocolbuffers/protobuf/archive/22d0e265de7d2b3d2e9a00d071313502e7d4cccf.tar.gz",
-                "https://github.com/protocolbuffers/protobuf/archive/22d0e265de7d2b3d2e9a00d071313502e7d4cccf.tar.gz",
-            ],
-            patches = ["@com_github_grpc_grpc//third_party:protobuf.patch"],
-            patch_args = ["-p1"],
-        )
-
     if "com_google_googletest" not in native.existing_rules():
         http_archive(
             name = "com_google_googletest",
@@ -282,7 +270,7 @@ def grpc_deps():
     if "com_github_cares_cares" not in native.existing_rules():
         http_archive(
             name = "com_github_cares_cares",
-            build_file = "@com_github_grpc_grpc//third_party:cares/cares.BUILD",
+            build_file = "//third_party:cares/cares.BUILD",
             sha256 = "ec76c5e79db59762776bece58b69507d095856c37b81fd35bfb0958e74b61d93",
             strip_prefix = "c-ares-6654436a307a5a686b008c1d4c93b0085da6e6d8",
             urls = [
@@ -368,16 +356,6 @@ def grpc_deps():
             ],
         )
 
-    if "io_bazel_rules_go" not in native.existing_rules():
-        http_archive(
-            name = "io_bazel_rules_go",
-            sha256 = "69de5c704a05ff37862f7e0f5534d4f479418afc21806c887db544a316f3cb6b",
-            urls = [
-                "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.27.0/rules_go-v0.27.0.tar.gz",
-                "https://github.com/bazelbuild/rules_go/releases/download/v0.27.0/rules_go-v0.27.0.tar.gz",
-            ],
-        )
-
     if "build_bazel_rules_apple" not in native.existing_rules():
         http_archive(
             name = "build_bazel_rules_apple",
@@ -401,7 +379,7 @@ def grpc_deps():
     if "com_github_libuv_libuv" not in native.existing_rules():
         http_archive(
             name = "com_github_libuv_libuv",
-            build_file = "@com_github_grpc_grpc//third_party:libuv.BUILD",
+            build_file = "//third_party:libuv.BUILD",
             sha256 = "5ca4e9091f3231d8ad8801862dc4e851c23af89c69141d27723157776f7291e7",
             strip_prefix = "libuv-02a9e1be252b623ee032a3137c0b0c94afbe6809",
             urls = [
@@ -440,6 +418,8 @@ def grpc_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/census-instrumentation/opencensus-proto/archive/v0.3.0.tar.gz",
                 "https://github.com/census-instrumentation/opencensus-proto/archive/v0.3.0.tar.gz",
             ],
+            patches = ["//third_party:opencensus-proto.patch"],
+            patch_args = ["-p2"],
         )
 
     if "com_envoyproxy_protoc_gen_validate" not in native.existing_rules():
@@ -450,7 +430,7 @@ def grpc_deps():
             urls = [
                 "https://github.com/envoyproxy/protoc-gen-validate/archive/4694024279bdac52b77e22dc87808bd0fd732b69.tar.gz",
             ],
-            patches = ["@com_github_grpc_grpc//third_party:protoc-gen-validate.patch"],
+            patches = ["//third_party:protoc-gen-validate.patch"],
             patch_args = ["-p1"],
         )
 
@@ -465,6 +445,11 @@ def grpc_deps():
             ],
         )
 
+grpc_repo_deps_ext = module_extension(implementation = lambda ctx: grpc_repo_deps())
+
+def grpc_deps():
+    grpc_bind_deps()
+    grpc_repo_deps()
     grpc_python_deps()
 
 # TODO: move some dependencies from "grpc_deps" here?
@@ -493,7 +478,7 @@ def grpc_test_only_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/twisted/twisted/archive/twisted-17.5.0.zip",
                 "https://github.com/twisted/twisted/archive/twisted-17.5.0.zip",
             ],
-            build_file = "@com_github_grpc_grpc//third_party:twisted.BUILD",
+            build_file = "//third_party:twisted.BUILD",
         )
 
     if "com_github_yaml_pyyaml" not in native.existing_rules():
@@ -505,7 +490,7 @@ def grpc_test_only_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/yaml/pyyaml/archive/3.12.zip",
                 "https://github.com/yaml/pyyaml/archive/3.12.zip",
             ],
-            build_file = "@com_github_grpc_grpc//third_party:yaml.BUILD",
+            build_file = "//third_party:yaml.BUILD",
         )
 
     if "com_github_twisted_incremental" not in native.existing_rules():
@@ -517,7 +502,7 @@ def grpc_test_only_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/twisted/incremental/archive/incremental-17.5.0.zip",
                 "https://github.com/twisted/incremental/archive/incremental-17.5.0.zip",
             ],
-            build_file = "@com_github_grpc_grpc//third_party:incremental.BUILD",
+            build_file = "//third_party:incremental.BUILD",
         )
 
     if "com_github_zopefoundation_zope_interface" not in native.existing_rules():
@@ -529,7 +514,7 @@ def grpc_test_only_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/zopefoundation/zope.interface/archive/4.4.3.zip",
                 "https://github.com/zopefoundation/zope.interface/archive/4.4.3.zip",
             ],
-            build_file = "@com_github_grpc_grpc//third_party:zope_interface.BUILD",
+            build_file = "//third_party:zope_interface.BUILD",
         )
 
     if "com_github_twisted_constantly" not in native.existing_rules():
@@ -541,7 +526,7 @@ def grpc_test_only_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/twisted/constantly/archive/15.1.0.zip",
                 "https://github.com/twisted/constantly/archive/15.1.0.zip",
             ],
-            build_file = "@com_github_grpc_grpc//third_party:constantly.BUILD",
+            build_file = "//third_party:constantly.BUILD",
         )
 
     if "com_google_libprotobuf_mutator" not in native.existing_rules():
@@ -553,5 +538,5 @@ def grpc_test_only_deps():
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/google/libprotobuf-mutator/archive/ffd86a32874e5c08a143019aad1aaf0907294c9f.tar.gz",
             ],
             strip_prefix = "libprotobuf-mutator-ffd86a32874e5c08a143019aad1aaf0907294c9f",
-            build_file = "@com_github_grpc_grpc//third_party:libprotobuf_mutator.BUILD",
+            build_file = "//third_party:libprotobuf_mutator.BUILD",
         )
diff --git a/bazel/grpc_extra_deps.bzl b/bazel/grpc_extra_deps.bzl
index 4d8afa3131..da7c5c94b8 100644
--- a/bazel/grpc_extra_deps.bzl
+++ b/bazel/grpc_extra_deps.bzl
@@ -13,9 +13,9 @@
 # limitations under the License.
 """Loads the dependencies necessary for the external repositories defined in grpc_deps.bzl."""
 
-load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
-load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependencies")
-load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
+# load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
+# load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependencies")
+# load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
 load("@com_envoyproxy_protoc_gen_validate//:dependencies.bzl", "go_third_party")
 load("@com_google_googleapis//:repository_rules.bzl", "switched_rules_by_language")
 load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
@@ -32,12 +32,12 @@ def grpc_extra_deps(ignore_version_differences = False):
     the extra dependencies. For example, they can do the following in their
     WORKSPACE
     ```
-    load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps", "grpc_test_only_deps")
+    load("//bazel:grpc_deps.bzl", "grpc_deps", "grpc_test_only_deps")
     grpc_deps()
 
     grpc_test_only_deps()
 
-    load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
+    load("//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
 
     grpc_extra_deps()
     ```
@@ -54,16 +54,19 @@ def grpc_extra_deps(ignore_version_differences = False):
 
     go_rules_dependencies()
     go_register_toolchains(version = "1.18")
-    gazelle_dependencies()
+    # gazelle_dependencies()
 
     # Pull-in the go 3rd party dependencies for protoc_gen_validate, which is
     # needed for building C++ xDS protos
     go_third_party()
 
-    apple_rules_dependencies(ignore_version_differences = ignore_version_differences)
+    # apple_rules_dependencies(ignore_version_differences = ignore_version_differences)
 
-    apple_support_dependencies()
+    # apple_support_dependencies()
 
+    googleapis_deps()
+
+def googleapis_deps():
     # Initialize Google APIs with only C++ and Python targets
     switched_rules_by_language(
         name = "com_google_googleapis_imports",
@@ -71,3 +74,5 @@ def grpc_extra_deps(ignore_version_differences = False):
         grpc = True,
         python = True,
     )
+
+grpc_extra_deps_ext = module_extension(implementation = lambda ctx: googleapis_deps())
diff --git a/bazel/grpc_python_deps.bzl b/bazel/grpc_python_deps.bzl
index c88526e531..c2b095fcec 100644
--- a/bazel/grpc_python_deps.bzl
+++ b/bazel/grpc_python_deps.bzl
@@ -14,7 +14,7 @@
 """Load dependencies needed to compile and test the grpc python library as a 3rd-party consumer."""
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
-load("@com_github_grpc_grpc//third_party/py:python_configure.bzl", "python_configure")
+load("//third_party/py:python_configure.bzl", "python_configure")
 
 # buildifier: disable=unnamed-macro
 def grpc_python_deps():
@@ -26,7 +26,7 @@ def grpc_python_deps():
     if "six" not in native.existing_rules():
         http_archive(
             name = "six",
-            build_file = "@com_github_grpc_grpc//third_party:six.BUILD",
+            build_file = "//third_party:six.BUILD",
             sha256 = "1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926",
             urls = ["https://files.pythonhosted.org/packages/71/39/171f1c67cd00715f190ba0b100d606d440a28c93c7714febeca8b79af85e/six-1.16.0.tar.gz"],
         )
@@ -34,7 +34,7 @@ def grpc_python_deps():
     if "enum34" not in native.existing_rules():
         http_archive(
             name = "enum34",
-            build_file = "@com_github_grpc_grpc//third_party:enum34.BUILD",
+            build_file = "//third_party:enum34.BUILD",
             strip_prefix = "enum34-1.1.6",
             sha256 = "8ad8c4783bf61ded74527bffb48ed9b54166685e4230386a9ed9b1279e2df5b1",
             urls = ["https://files.pythonhosted.org/packages/bf/3e/31d502c25302814a7c2f1d3959d2a3b3f78e509002ba91aea64993936876/enum34-1.1.6.tar.gz"],
@@ -43,7 +43,7 @@ def grpc_python_deps():
     if "futures" not in native.existing_rules():
         http_archive(
             name = "futures",
-            build_file = "@com_github_grpc_grpc//third_party:futures.BUILD",
+            build_file = "//third_party:futures.BUILD",
             strip_prefix = "futures-3.3.0",
             sha256 = "7e033af76a5e35f58e56da7a91e687706faf4e7bdfb2cbc3f2cca6b9bcda9794",
             urls = ["https://files.pythonhosted.org/packages/47/04/5fc6c74ad114032cd2c544c575bffc17582295e9cd6a851d6026ab4b2c00/futures-3.3.0.tar.gz"],
@@ -54,7 +54,7 @@ def grpc_python_deps():
             name = "io_bazel_rules_python",
             url = "https://github.com/bazelbuild/rules_python/releases/download/0.4.0/rules_python-0.4.0.tar.gz",
             sha256 = "954aa89b491be4a083304a2cb838019c8b8c3720a7abb9c4cb81ac7a24230cea",
-            patches = ["@com_github_grpc_grpc//third_party:rules_python.patch"],
+            patches = ["//third_party:rules_python.patch"],
             patch_args = ["-p1"],
         )
 
@@ -68,7 +68,7 @@ def grpc_python_deps():
     if "cython" not in native.existing_rules():
         http_archive(
             name = "cython",
-            build_file = "@com_github_grpc_grpc//third_party:cython.BUILD",
+            build_file = "//third_party:cython.BUILD",
             sha256 = "bb72b2f0ef029472759c711f0a4bded6e15e3f9bda3797550cef3c1d87d02283",
             strip_prefix = "cython-0.29.26",
             urls = [
diff --git a/bazel/objc_grpc_library.bzl b/bazel/objc_grpc_library.bzl
index dbe07b1811..74c58ebfd3 100644
--- a/bazel/objc_grpc_library.bzl
+++ b/bazel/objc_grpc_library.bzl
@@ -77,7 +77,7 @@ def objc_grpc_library(name, deps, srcs = [], use_well_known_protos = False, **kw
             "src/objective-c",
         ],
         deps = [
-            "@com_github_grpc_grpc//src/objective-c:proto_objc_rpc",
+            "//src/objective-c:proto_objc_rpc",
             "@com_google_protobuf//:protobuf_objc",
         ],
         **kwargs
diff --git a/bazel/python_rules.bzl b/bazel/python_rules.bzl
index a39159aba1..ea5bcbfd11 100644
--- a/bazel/python_rules.bzl
+++ b/bazel/python_rules.bzl
@@ -104,7 +104,7 @@ _gen_py_aspect = aspect(
     fragments = ["py"],
     attrs = {
         "_protoc": attr.label(
-            default = Label("//external:protocol_compiler"),
+            default = "@com_google_protobuf//:protoc",
             providers = ["files_to_run"],
             executable = True,
             cfg = "host",
@@ -160,7 +160,7 @@ py_proto_library = rule(
             aspects = [_gen_py_aspect],
         ),
         "_protoc": attr.label(
-            default = Label("//external:protocol_compiler"),
+            default = "@com_google_protobuf//:protoc",
             providers = ["files_to_run"],
             executable = True,
             cfg = "host",
@@ -248,7 +248,7 @@ _generate_pb2_grpc_src = rule(
             executable = True,
             providers = ["files_to_run"],
             cfg = "host",
-            default = Label("//external:protocol_compiler"),
+            default = "@com_google_protobuf//:protoc",
         ),
         "_grpc_library": attr.label(
             default = Label("//src/python/grpcio/grpc:grpcio"),
diff --git a/third_party/BUILD b/third_party/BUILD
index 72a4730d89..82cef3871c 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -15,3 +15,175 @@ exports_files([
     "rules_python.patch",
     "protoc-gen-validate.patch",
 ])
+
+package(default_visibility = ["//:__subpackages__"])
+
+alias(
+    name = "opencensus-trace-span_context",
+    actual = "@io_opencensus_cpp//opencensus/trace:span_context",
+)
+
+alias(
+    name = "upb_lib",
+    actual = "@upb//:upb",
+)
+
+alias(
+    name = "upb_reflection",
+    actual = "@upb//:reflection",
+)
+
+alias(
+    name = "upb_lib_descriptor",
+    actual = "@upb//:descriptor_upb_proto",
+)
+
+alias(
+    name = "upb_lib_descriptor_reflection",
+    actual = "@upb//:descriptor_upb_proto_reflection",
+)
+
+alias(
+    name = "upb_textformat_lib",
+    actual = "@upb//:textformat",
+)
+
+alias(
+    name = "upb_json_lib",
+    actual = "@upb//:json",
+)
+
+alias(
+    name = "upb_generated_code_support__only_for_generated_code_do_not_use__i_give_permission_to_break_me",
+    actual = "@upb//:generated_code_support__only_for_generated_code_do_not_use__i_give_permission_to_break_me",
+)
+
+alias(
+    name = "absl",
+    actual = "@com_google_absl//absl",
+)
+
+alias(
+    name = "absl-base",
+    actual = "@com_google_absl//absl/base",
+)
+
+alias(
+    name = "absl-time",
+    actual = "@com_google_absl//absl/time:time",
+)
+
+alias(
+    name = "libssl",
+    actual = "@boringssl//:ssl",
+)
+
+alias(
+    name = "libcrypto",
+    actual = "@boringssl//:crypto",
+)
+
+alias(
+    name = "madler_zlib",
+    actual = "@zlib//:zlib",
+)
+
+alias(
+    name = "protobuf",
+    actual = "@com_google_protobuf//:protobuf",
+)
+
+alias(
+    name = "protobuf_clib",
+    actual = "@com_google_protobuf//:protoc_lib",
+)
+
+alias(
+    name = "protobuf_headers",
+    actual = "@com_google_protobuf//:protobuf_headers",
+)
+
+alias(
+    name = "protocol_compiler",
+    actual = "@com_google_protobuf//:protoc",
+)
+
+alias(
+    name = "cares",
+    actual = "@com_github_cares_cares//:ares",
+)
+
+alias(
+    name = "gtest",
+    actual = "@com_google_googletest//:gtest",
+)
+
+alias(
+    name = "benchmark",
+    actual = "@com_github_google_benchmark//:benchmark",
+)
+
+alias(
+    name = "re2",
+    actual = "@com_googlesource_code_re2//:re2",
+)
+
+alias(
+    name = "grpc_cpp_plugin",
+    actual = "//src/compiler:grpc_cpp_plugin",
+)
+
+alias(
+    name = "grpc++_codegen_proto",
+    actual = "//:grpc++_codegen_proto",
+)
+
+alias(
+    name = "opencensus-context",
+    actual = "@io_opencensus_cpp//opencensus/context:context",
+)
+
+alias(
+    name = "opencensus-trace",
+    actual = "@io_opencensus_cpp//opencensus/trace:trace",
+)
+
+alias(
+    name = "opencensus-trace-context_util",
+    actual = "@io_opencensus_cpp//opencensus/trace:context_util",
+)
+
+alias(
+    name = "opencensus-trace-propagation",
+    actual = "@io_opencensus_cpp//opencensus/trace:grpc_trace_bin",
+)
+
+alias(
+    name = "opencensus-stats",
+    actual = "@io_opencensus_cpp//opencensus/stats:stats",
+)
+
+alias(
+    name = "opencensus-stats-test",
+    actual = "@io_opencensus_cpp//opencensus/stats:test_utils",
+)
+
+alias(
+    name = "opencensus-with-tag-map",
+    actual = "@io_opencensus_cpp//opencensus/tags:with_tag_map",
+)
+
+alias(
+    name = "opencensus-tags",
+    actual = "@io_opencensus_cpp//opencensus/tags:tags",
+)
+
+alias(
+    name = "opencensus-tags-context_util",
+    actual = "@io_opencensus_cpp//opencensus/tags:context_util",
+)
+
+alias(
+    name = "libuv",
+    actual = "@libuv//:libuv",
+)
diff --git a/third_party/cares/cares.BUILD b/third_party/cares/cares.BUILD
index 43e8ac7b68..414444e378 100644
--- a/third_party/cares/cares.BUILD
+++ b/third_party/cares/cares.BUILD
@@ -90,30 +90,30 @@ config_setting(
 
 copy_file(
     name = "ares_build_h",
-    src = "@com_github_grpc_grpc//third_party/cares:ares_build.h",
+    src = "//third_party/cares:ares_build.h",
     out = "ares_build.h",
 )
 
 copy_file(
     name = "ares_config_h",
     src = select({
-        ":ios_x86_64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":ios_armv7": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":ios_armv7s": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":ios_arm64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":tvos_x86_64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":tvos_arm64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":watchos_i386": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":watchos_x86_64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":watchos_armv7k": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":watchos_arm64_32": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":darwin": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":darwin_x86_64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":darwin_arm64": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":darwin_arm64e": "@com_github_grpc_grpc//third_party/cares:config_darwin/ares_config.h",
-        ":windows": "@com_github_grpc_grpc//third_party/cares:config_windows/ares_config.h",
-        ":android": "@com_github_grpc_grpc//third_party/cares:config_android/ares_config.h",
-        "//conditions:default": "@com_github_grpc_grpc//third_party/cares:config_linux/ares_config.h",
+        ":ios_x86_64": "//third_party/cares:config_darwin/ares_config.h",
+        ":ios_armv7": "//third_party/cares:config_darwin/ares_config.h",
+        ":ios_armv7s": "//third_party/cares:config_darwin/ares_config.h",
+        ":ios_arm64": "//third_party/cares:config_darwin/ares_config.h",
+        ":tvos_x86_64": "//third_party/cares:config_darwin/ares_config.h",
+        ":tvos_arm64": "//third_party/cares:config_darwin/ares_config.h",
+        ":watchos_i386": "//third_party/cares:config_darwin/ares_config.h",
+        ":watchos_x86_64": "//third_party/cares:config_darwin/ares_config.h",
+        ":watchos_armv7k": "//third_party/cares:config_darwin/ares_config.h",
+        ":watchos_arm64_32": "//third_party/cares:config_darwin/ares_config.h",
+        ":darwin": "//third_party/cares:config_darwin/ares_config.h",
+        ":darwin_x86_64": "//third_party/cares:config_darwin/ares_config.h",
+        ":darwin_arm64": "//third_party/cares:config_darwin/ares_config.h",
+        ":darwin_arm64e": "//third_party/cares:config_darwin/ares_config.h",
+        ":windows": "//third_party/cares:config_windows/ares_config.h",
+        ":android": "//third_party/cares:config_android/ares_config.h",
+        "//conditions:default": "//third_party/cares:config_linux/ares_config.h",
     }),
     out = "ares_config.h",
 )
diff --git a/third_party/opencensus-proto.patch b/third_party/opencensus-proto.patch
new file mode 100644
index 0000000000..4ebf1c1ac2
--- /dev/null
+++ b/third_party/opencensus-proto.patch
@@ -0,0 +1,14 @@
+diff --git a/src/opencensus/proto/trace/v1/BUILD.bazel b/src/opencensus/proto/trace/v1/BUILD.bazel
+index 0beb6d8..f7f61e6 100644
+--- a/src/opencensus/proto/trace/v1/BUILD.bazel
++++ b/src/opencensus/proto/trace/v1/BUILD.bazel
+@@ -77,7 +77,7 @@ py_proto_library(
+     srcs = ["trace.proto"],
+     deps = [
+         "//opencensus/proto/resource/v1:resource_proto_py",
+-        "@com_google_protobuf//:protobuf_python",
++    #    "@com_google_protobuf//:protobuf_python",
+     ],
+ )
+
+
diff --git a/third_party/protoc-gen-validate.patch b/third_party/protoc-gen-validate.patch
index bea7b87cec..f6bfb890b8 100644
--- a/third_party/protoc-gen-validate.patch
+++ b/third_party/protoc-gen-validate.patch
@@ -1,14 +1,13 @@
-index 5b2443d..c26a9dd 100644
---- a/dependencies.bzl
-+++ b/dependencies.bzl
-@@ -104,8 +104,8 @@ def go_third_party():
-     go_repository(
-         name = "org_golang_google_protobuf",
-         importpath = "google.golang.org/protobuf",
--        sum = "h1:bxAC2xTBsZGibn2RTntX0oH50xLsqy1OxA9tTL3p/lk=",
--        version = "v1.27.1",
-+        sum = "h1:w43yiav+6bVFTBQFZX0r7ipe9JQ1QsbMgHwbBziscLw=",
-+        version = "v1.28.0",
-     )
-     go_repository(
-         name = "org_golang_x_crypto",
+diff --git a/validate/BUILD b/validate/BUILD
+index 5040d64..03e4e52 100644
+--- a/validate/BUILD
++++ b/validate/BUILD
+@@ -28,7 +28,7 @@ cc_proto_library(
+ py_proto_library(
+     name = "validate_py",
+     srcs = ["validate.proto"],
+-    deps = ["@com_google_protobuf//:protobuf_python"],
++    # deps = ["@com_google_protobuf//:protobuf_python"],
+ )
+ 
+ go_proto_library(
